# Maintainer: Alessandro Marchioro <alessandro.marchioro1998@gmail.com>
# Co-Maintainer: Darvin Delgado <dnmodder at gmail dot com>
_sdkver=9.0.100
_pkgname=ryujinx
_binname=Ryujinx
pkgname="${_pkgname}-git"
pkgver=1.2.423.r33
pkgrel=1
pkgdesc='Experimental Nintendo Switch Emulator written in C#'
arch=(x86_64)
url="https://github.com/hummeltech/${_binname}"
license=('MIT')
depends=('fontconfig'
         'gcc-libs'
         'glibc'
         'hicolor-icon-theme'
         'sh'
         'zlib')
makedepends=('chrpath'
             'git'
             'desktop-file-utils')
provides=(${_pkgname})
conflicts=(${_pkgname})
source=("${pkgname}::git+file://${PWD}/.."
        "dotnet-sdk-linux-x64.tar.gz::https://dotnetcli.azureedge.net/dotnet/Sdk/${_sdkver}/dotnet-sdk-${_sdkver}-linux-x64.tar.gz")
sha256sums=('SKIP'
            '4c971ac80615faa806de82f0ab3073e50aebb402b79ac265ab97765c9a29ed56')
noextract=('dotnet-sdk-linux-x64.tar.gz')
options=(!strip !debug)


pkgver() {
	cd "${pkgname}"
	git describe --abbrev=7 --long --tags | sed 's/Canary-//;s/\([^-]*-g\)/r\1/;s/-g.*//;s/-/./g'
}

build() {
	export DOTNET_ROOT="${PWD}"/dotnet
	rm -rf "${DOTNET_ROOT}" && mkdir "${DOTNET_ROOT}" && tar zxf dotnet-sdk-linux-x64.tar.gz -C "${DOTNET_ROOT}"
	export PATH="${DOTNET_ROOT}":"${DOTNET_ROOT}"/tools:"${PATH}"

	export DOTNET_CLI_TELEMETRY_OPTOUT=1

	cd "${pkgname}"

	dotnet clean
	dotnet nuget locals all -c

	# _args="-c Release -r linux-x64 -p:Version=$(git describe --abbrev=7 --long --tags | sed 's/\([^-]*-g\)/r\1/;s/-g.*//') -p:DebugType=embedded -p:ExtraDefineConstants=DISABLE_UPDATER%2CFORCE_EXTERNAL_BASE_DIR"
	local _args=(
		--configuration Release
		--nologo
		--output ../publish src/"${_binname}"
		--runtime linux-x64
		--self-contained true
		-property:DebugType=none
		-property:ExtraDefineConstants=DISABLE_UPDATER
		-property:Version=$(echo ${pkgver} | sed 's/.r/-r/')
	)

	dotnet publish "${_args[@]}"
}

package() {
	# Binary and library directories
	install -dm755 "${pkgdir}"/usr/bin "${pkgdir}"/usr/lib/"${_pkgname}"

	# Binary
	install -Dm755 publish/"${_binname}" "${pkgdir}"/usr/bin/"${_binname}"

	# Binary wrapper script
	install -Dm755 publish/"${_binname}".sh "${pkgdir}"/usr/bin/"${_binname}".sh

	# Binary wrapper script link
	ln --symbolic /usr/bin/"${_binname}".sh "${pkgdir}"/usr/bin/"${_pkgname}"

	# Desktop entry
	install -D "${pkgname}"/distribution/linux/"${_binname}".desktop "${pkgdir}"/usr/share/applications/"${_pkgname}".desktop

	# Icon
	install -D "${pkgname}"/distribution/misc/Logo.svg "${pkgdir}"/usr/share/icons/hicolor/scalable/apps/"${_pkgname}".svg

	# Libraries
	install -Dm644 publish/libHarfBuzzSharp.so publish/libSkiaSharp.so "${pkgdir}"/usr/lib/"${_pkgname}"

	# License
	install -Dm644 publish/LICENSE.txt "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE

	# Change RUNPATH to library directory in binary
	chrpath --replace /usr/lib/"${_pkgname}" "${pkgdir}"/usr/bin/"${_binname}"

	# Override various desktop entry configuration options
	desktop-file-edit --set-key="Exec" --set-value="/usr/bin/${_binname}.sh %f" "${pkgdir}"/usr/share/applications/"${_pkgname}".desktop
	desktop-file-edit --set-icon="${_pkgname}" "${pkgdir}"/usr/share/applications/"${_pkgname}".desktop
}
